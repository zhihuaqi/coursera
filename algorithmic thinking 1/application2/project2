"""
Provided code for Application portion of Module 2
"""

import random
from collections import deque

def copy_graph(graph):
	new_graph = {}
	for node in graph:
		new_graph[node] = set(graph[node])
	return new_graph

def bfs_visited(ugraph, start_node):												visited = set()
	queue = deque()
	visited.add(start_node)
	queue.append(start_node)
	while queue:
		node = queue.popleft()
		for neighbor in ugraph[node]:
			if neighbor not in visited:
				visited.add(neighbor)
				queue.append(neighbor)
	return visited

def cc_visited(ugraph):
	connected_components = []
	remaining_nodes = set(ugraph.keys())
	while remaining_nodes:
		node = remaining_nodes.pop()
		visited = bfs_visited(ugraph, node)
		connected_components.append(visited)
		remaining_nodes -= visited
	return connected_components

def largest_cc_size(ugraph):
	if not len(ugraph):
		return 0
	return max(map(len, cc_visited(ugraph)))

def remove_node(ugraph, node):
	for neighbor in ugraph[node]:
		ugraph[neighbor].remove(node)
	del ugraph[node]
	
def compute_resilience(ugraph, attack_order):
	ugraph = copy_graph(ugraph)
	resilience = [largest_cc_size(ugraph)]
	for node in attack_order:
		remove_node(ugraph, node)
		resilience.append(largest_cc_size(ugraph))
	return resilience
